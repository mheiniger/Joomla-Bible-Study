<?xml version="1.0" encoding="UTF-8"?>

<project name="biblestudy" default="build" basedir=".">
    <property name="basedir" value="${project.basedir}" />
	<property name="project.name" value="Joomla Bible Study"/>

	<!-- Joomla version to run the unit tests against -->
	<property name="joomla.version" value="2.5.11" />

	<property name="config_path" value="${basedir}/tests/system/servers"/>

	<property name="src.test" value="${basedir}/tests/test"/>
    <property name="dest.test" value="${basedir}/com_biblestudy/admin/views/test"/>

	<target name="init" description="Create artifact directories">
		<mkdir dir="${basedir}/build/packages" />
		<mkdir dir="${basedir}/build/reports" />
		<mkdir dir="${basedir}/docs" />
		<mkdir dir="${basedir}/build/packages/component" />
		<mkdir dir="${basedir}/build/packages/modules" />
		<mkdir dir="${basedir}/build/packages/plugins" />
		<mkdir dir="${basedir}/build/packages/addons" />
	</target>

	<!-- List of all files that are packaged and distributed -->
	<fileset dir="${basedir}" id="distributed_files">
		<include name="com_biblestudy/**/*.php"/>
		<include name="jbsmigration/**/*.php"/>
		<include name="joomSEF_extension/**/*.php"/>
		<include name="mod_biblestudy/**/*.php"/>
		<include name="mod_biblestudy_podcast/**/*.php"/>
		<include name="plg_biblestudy_backup/**/*.php"/>
		<include name="plg_biblestudy_finder/**/*.php"/>
		<include name="plg_biblestudy_podcast/**/*.php"/>
		<include name="plg_biblestudhy_search/**/*.php"/>
		<include name="xmap_JBS/**/*.php"/>
	</fileset>

	<!-- Validate syntax -->
	<target name="lint" description="Perform syntax check of sourcecode files">
		<phplint haltonfailure="true">
			<fileset refid="distributed_files"/>
		</phplint>
	</target>

	<target name="phpunit" depends="init" description="Run unit tests using PHPUnit and generates junit.xml and clover.xml">
		<phpunit haltonfailure="true" haltonerror="true" bootstrap="${basedir}/tests/unit/bootstrap.php">
            <!-- We can only use one formatter at a time -->
			<formatter todir="${basedir}/build/reports" type="plain" outfile="test-brief.txt"/>
			<batchtest>
				<fileset dir="${basedir}/tests/unit/suites/" includes="**/*.php"/>
			</batchtest>
		</phpunit>
	</target>

	<!-- Copy and paste detector -->
	<target name="phpcpd" depends="init" description="Checks for copy and pasted code">
		<phpcpd>
			<fileset refid="distributed_files"/>
			<formatter type="pmd" outfile="${basedir}/build/reports/cpd-code.xml"/>
		</phpcpd>
	</target>

	<!-- Measure the size of the project -->
	<target name="size" depends="init" description="Measures the size of the project">
		<phploc reportType="txt" reportName="project-size" reportDirectory="${basedir}/build/reports">
			<fileset refid="distributed_files"/>
		</phploc>
	</target>

	<!-- Detect violations in coding standards -->
	<target name="phpcs" depends="init" description="Generate checkstyle.xml using PHP_CodeSniffer">
		<phpcodesniffer standard="PEAR" format="summary" showSniffs="true" showWarnings="true" haltonerror="true">
			<fileset refid="distributed_files"/>
			<formatter type="checkstyle" outfile="${basedir}/build/reports/phpcs-checkstyle.xml"/>
		</phpcodesniffer>
	</target>

	<!-- Creates API documentation -->
	<target name="apidoc" depends="init" description="Generate project API documentation">
		<phpdoc2 title="${project.name} API" destdir="${basedir}/docs" template="responsive">
			<fileset refid="distributed_files"/>
		</phpdoc2>
	</target>

	<!-- Code analyzer and metric tool -->
	<target name="pdepend" depends="init" description="Generate jdepend.xml and software metrics charts using PHP_Depend">
        <phpdepend haltonerror="true">
            <fileset refid="distributed_files"/>
            <logger type="jdepend-xml" outfile="${basedir}/build/reports/jdepend.xml"/>
            <logger type="jdepend-chart" outfile="${basedir}/build/reports/jdepend-dependencies.svg"/>
            <logger type="overview-pyramid" outfile="${basedir}/build/reports/jdepend-pyramid.svg"/>
            <analyzer type="coderank-mode" value="method"/>
        </phpdepend>
	</target>

	<!-- PHP Mess Detector -->
	<target name="pmd" depends="init" description="Detect messy code, and generate report">
		<phpmd rulesets="${basedir}/build/phpmd.xml">
			<fileset refid="distributed_files"/>
			<formatter type="html" outfile="${basedir}/build/reports/pmd.html"/>
		</phpmd>
	</target>

	<!-- Build distributable package -->
	<target name="package" depends="dev.clean,init,package.modules,package.plugins,package.component,package.addons" description="Builds the whole component, including modules and plugins">

		<!-- Stage the package -->
		<mkdir dir="${basedir}/build/packages/_tmp"/>
		<copy todir="${basedir}/build/packages/_tmp/packages">
			<mapper type="flatten"/>
			<fileset dir="${basedir}/build/packages">
        		<include name="component/*.zip"/>
        		<include name="plugins/*.zip"/>
        		<include name="modules/*.zip"/>
        	</fileset>
		</copy>
		<copy todir="${basedir}/build/packages/_tmp">
			<fileset dir="${basedir}/build">
				<include name="pkg_biblestudy_package.xml"/>
			</fileset>
		</copy>

	<!-- Create the archive -->
        <zip destfile="${basedir}/build/packages/pkg_biblestudy.zip" basedir="${basedir}/build/packages/_tmp"/>

	<!-- Remove the staged packages -->
        <delete dir="${basedir}/build/packages/_tmp" />
	</target>

	<!-- Create com_biblestudy.zip -->
	<target name="package.component" depends="init,dev.clean" description="Builds the component">
		<zip destfile="${basedir}/build/packages/component/com_biblestudy.zip" basedir="${basedir}/com_biblestudy"/>
        <!--Reset back to a development state-->
        <phingcall target="dev.init"/>
	</target>

	<!-- Create mod_biblestudy.zip and mod_biblestudy_podcast.zip -->
	<target name="package.modules" depends="init" description="Builds the modules">
		<zip destfile="${basedir}/build/packages/modules/mod_biblestudy.zip" basedir="${basedir}/mod_biblestudy"/>
        <zip destfile="${basedir}/build/packages/modules/mod_biblestudy_podcast.zip" basedir="${basedir}/mod_biblestudy_podcast"/>
    </target>

	<!-- Create plg_biblestudy_finder.zip, plg_biblestudy_search.zip, plg_biblestudy_podcast.zip, and plg_biblestudy_backup.zip -->
    <target name="package.plugins" depends="init" description="Builds the plugins">
    	<zip destfile="${basedir}/build/packages/plugins/plg_biblestudy_finder.zip" basedir="${basedir}/plg_biblestudy_finder"/>
        <zip destfile="${basedir}/build/packages/plugins/plg_biblestudy_search.zip" basedir="${basedir}/plg_biblestudy_search"/>
        <zip destfile="${basedir}/build/packages/plugins/plg_biblestudy_podcast.zip" basedir="${basedir}/plg_biblestudy_podcast"/>
        <zip destfile="${basedir}/build/packages/plugins/plg_biblestudy_backup.zip" basedir="${basedir}/plg_biblestudy_backup"/>
    </target>

	<!-- Create plg_xmap_jbs.zip, com_jbsmigration.zip, and joomsef_com_biblestudy.zip -->
    <target name="package.addons" depends="init" description="Builds addons, including third party integrations">
    	<zip destfile="${basedir}/build/packages/addons/plg_xmap_jbs.zip" basedir="${basedir}/xmap_JBS"/>
        <zip destfile="${basedir}/build/packages/addons/com_jbsmigration.zip" basedir="${basedir}/jbsmigration"/>
        <zip destfile="${basedir}/build/packages/addons/joomsef_com_biblestudy.zip" basedir="${basedir}/joomSEF_extension"/>
    </target>

	<!-- Setup config file for running the Selenium Webdriver tests -->
	<target name="test.setup">
    	<propertyprompt propertyName="server_root" defaultValue="/Applications/MAMP/htdocs" promptText="Enter the path to your Joomla! root directory"/>
    	<propertyprompt propertyName="host" defaultValue="//localhost" promptText="Enter the sever host"/>
    	<propertyprompt propertyName="db_host" defaultValue="localhost" promptText="Enter database host"/>
    	<propertyprompt propertyName="db_user" defaultValue="root" promptText="Enter Database username"/>
    	<propertyprompt propertyName="db_pass" defaultValue="root" promptText="Enter database password"/>
    	<propertyprompt propertyName="db_name" defaultValue="joomla-dev" promptText="Enter Database name"/>
    	<propertyprompt propertyName="joomla_username" defaultValue="admin" promptText="Enter an initial Joomla username"/>
    	<propertyprompt propertyName="joomla_password" defaultValue="password" promptText="Enter an initial Joomla password"/>
    	<propertyprompt propertyName="joomla_email" defaultValue="example@example.com" promptText="Enter an initial Joomla email"/>

		<copy file="${config_path}/configdef.php.dist" tofile="${config_path}/configdef.php" overwrite="true">
			<filterchain>
				<replacetokens begintoken="##" endtoken="##">
					<token key="SERVER_ROOT" value="${server_root}"/>
					<token key="HOST" value="${host}"/>
					<token key="DB_HOST" value="${db_host}"/>
					<token key="DB_USER" value="${db_user}"/>
					<token key="DB_PASS" value="${db_pass}"/>
					<token key="DB_NAME" value="${db_name}"/>
					<token key="JOOMLA_USERNAME" value="${joomla_username}"/>
					<token key="JOOMLA_PASSWORD" value="${joomla_password}"/>
					<token key="JOOMLA_EMAIL" value="${joomla_email}"/>
				</replacetokens>
			</filterchain>
		</copy>

		<!-- Setup the joomla test environment -->
		<phingcall target="stage_joomla">
                <property name="joomla-stage-dir" value="tests/.joomla-dev-test"/>
        </phingcall>

		<!-- Link Joomla to the webserver's root directory  -->
		<symlink target="${basedir}/tests/.joomla-dev" link="${server_root}/joomla-dev-test" overwrite="true"/>
	</target>

    <target name="test.clean">
    	<delete dir="${basedir}/tests/.joomla-dev" includeemptydirs="true"/>
    </target>

    <target name="test.system" depends="init" description="Run unit tests using PHPUnit and generates junit.xml and clover.xml">
		<phpunit haltonfailure="true" haltonerror="true" bootstrap="${basedir}/tests/system/servers/configdef.php">
            <!-- We can only use one formatter at a time -->
			<formatter todir="${basedir}/build/reports" type="plain" outfile="test-brief.txt"/>
			<batchtest>
				<fileset dir="tests/system/tests/installation" includes="**/*.php"/>
			</batchtest>
		</phpunit>
	</target>

	<!-- Set the default joomla path and create symbolic links -->
    <target name="dev.setup">
    	<propertyprompt propertyName="joomla_path" defaultValue="/Applications/MAMP/htdocs/" promptText="Enter the path to your Joomla! root directory"/>
    	<propertyprompt propertyName="joomla_dir" defaultValue="joomla-dev" promptText="Set Joomla folder name"/>
        <propertyprompt propertyName="stage_joomla" defaultValue="n" promptText="Stage Joomla?"/>
        <if>
            <equals arg1="${stage_joomla}" arg2="y"/>
            <then>
                <phingcall target="stage_joomla">
                    <property name="joomla-stage-dir" value=".joomla-dev"/>
                    <!-- Force a stage if its already staged -->
                    <property name="force" value="${stage_joomla"/>
                </phingcall>
            </then>
        </if>

        <echo message="Joomla path set to: ${joomla_path}${joomla_dir}"/>

        <!-- Link Joomla to the webserver's root directory  -->
        <symlink target="${basedir}/.joomla-dev" link="${joomla_path}${joomla_dir}" overwrite="true"/>

		<echo message="Linking component to Joomla!"/>

    	<!-- Create symbolic links for component in the Joomla directory -->
        <symlink target="${basedir}/com_biblestudy/media" link="${joomla_path}${joomla_dir}/media/com_biblestudy" overwrite="true"/>
        <symlink target="${basedir}/com_biblestudy/admin" link="${joomla_path}${joomla_dir}/administrator/components/com_biblestudy" overwrite="true"/>
		<symlink target="${basedir}/com_biblestudy/site" link="${joomla_path}${joomla_dir}/components/com_biblestudy" overwrite="true"/>
    	<symlink target="${basedir}/mod_biblestudy" link="${joomla_path}${joomla_dir}/modules/mod_biblestudy" overwrite="true"/>
    	<symlink target="${basedir}/mod_biblestudy_podcast" link="${joomla_path}${joomla_dir}/modules/mod_biblestudy_podcast" overwrite="true"/>
    	<symlink target="${basedir}/plg_biblestudy_backup" link="${joomla_path}${joomla_dir}/plugins/system/jbsbackup" overwrite="true"/>
    	<symlink target="${basedir}/plg_biblestudy_finder" link="${joomla_path}${joomla_dir}/plugins/finder/biblestudy" overwrite="true"/>
    	<symlink target="${basedir}/plg_biblestudy_podcast" link="${joomla_path}${joomla_dir}/plugins/system/jbspodcast" overwrite="true"/>
    	<symlink target="${basedir}/plg_biblestudy_podcast" link="${joomla_path}${joomla_dir}/plugins/search/biblestudysearch" overwrite="true"/>

        <phingcall target="dev.init"/>
    </target>

	<!-- Create symbolic links for the development state -->
	<target name="dev.init">
		<echo message="Initializing a development state"/>
        <symlink target="${basedir}/com_biblestudy/biblestudy.xml" link="${basedir}/com_biblestudy/admin/biblestudy.xml" overwrite="true"/>
        <symlink target="${basedir}/com_biblestudy/biblestudy.script.php" link="${basedir}/com_biblestudy/admin/biblestudy.script.php" overwrite="true"/>
        <symlink target="${basedir}/com_biblestudy/media/css/biblestudy.css" link="${basedir}/com_biblestudy/media/css/site/biblestudy.css" overwrite="true"/>

		<!-- Not sure what this does -->
            <!--<copy todir="${dest.test}">-->
            <!--<fileset dir="${src.test}" includes="**"/>-->
        <!--</copy>-->
	</target>

	<!-- Clean up symbolic links from the development state -->
    <target name="dev.clean">
    	<echo message="Cleaning up development state"/>
    	<delete file="com_biblestudy/admin/biblestudy.xml"/>
        <delete file="com_biblestudy/admin/biblestudy.script.php"/>
        <delete file="com_biblestudy/media/css/site/biblestudy.css"/>

		<!-- Undoing the creation of the dir -->
        <delete dir="com_biblestudy/admin/views/test" includeemptydirs="true"/>
    </target>

    <!-- Stage Joomla for bootstrapping unit tests -->
    <target name="stage_joomla" description="Stage Joomla in specified path">
        <!-- Only stage it if its not already staged -->
        <available file="${joomla-stage-dir}" type="dir" property="joomla-staged" />

        <!-- Possible conditions for staging-->
        <condition property="staged_but_not_forced">
        	<and>
    			<istrue value="${joomla-stage-dir}"/>
    			<equals arg1="${force}" arg2="n"/>
    		</and>
    	</condition>
    	<condition property="staged_but_forced">
			<and>
    			<istrue value="${joomla-stage-dir}"/>
    			<equals arg1="${force}" arg2="y"/>
    		</and>
    	</condition>
        <if>
    		<or>
    			<isfalse value="${joomla-stage-dir}"/>
    			<isfalse value="#{staged_but__not_forced}"/>
    			<istrue value="#{staged_but_forced}"/>
    		</or>
    		<then>
                <delete dir="${joomla-stage-dir}" includeemptydirs="true" verbose="true"/>
                <echo message="Staging Joomla ${joomla.version}. This will take a few minutes" />
                <gitclone repository="https://github.com/joomla/joomla-cms.git" targetPath="${joomla-stage-dir}"/>
                <!-- Switch to the Joomla version that we want to test on -->
                <gitcheckout repository="${joomla-stage-dir}" branchname="${joomla.version}" create="false"/>
			</then>
            <else>
           		<echo message="Joomla ${joomla.version} is already staged" />
            </else>
        </if>
    </target>

	<!-- This target should exit gracefully in order for a pull request is approved. -->
	<target name="build" depends="init,lint,phpunit,phpcpd,size,pmd,pdepend,pmd"/>
</project>
